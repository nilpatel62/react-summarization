{"ast":null,"code":"export const createReadElementContent = readVariableSizeInteger => {\n  return function (dataView, offset, type) {\n    let channelCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2;\n    const lengthAndValue = readVariableSizeInteger(dataView, offset);\n    if (lengthAndValue === null) {\n      return lengthAndValue;\n    }\n    const {\n      length,\n      value\n    } = lengthAndValue;\n    if (type === 'master') {\n      return {\n        content: null,\n        length\n      };\n    }\n    if (offset + length + value > dataView.byteLength) {\n      return null;\n    }\n    if (type === 'binary') {\n      const numberOfSamples = (value / Float32Array.BYTES_PER_ELEMENT - 1) / channelCount;\n      const content = Array.from({\n        length: channelCount\n      }, () => new Float32Array(numberOfSamples));\n      for (let i = 0; i < numberOfSamples; i += 1) {\n        const elementOffset = i * channelCount + 1;\n        for (let j = 0; j < channelCount; j += 1) {\n          content[j][i] = dataView.getFloat32(offset + length + (elementOffset + j) * Float32Array.BYTES_PER_ELEMENT, true);\n        }\n      }\n      return {\n        content,\n        length: length + value\n      };\n    }\n    return {\n      content: null,\n      length: length + value\n    };\n  };\n};","map":{"version":3,"names":["createReadElementContent","readVariableSizeInteger","dataView","offset","type","channelCount","arguments","length","undefined","lengthAndValue","value","content","byteLength","numberOfSamples","Float32Array","BYTES_PER_ELEMENT","Array","from","i","elementOffset","j","getFloat32"],"sources":["/Users/neelpatel/Desktop/react_application/pushup_counter/node_modules/extendable-media-recorder/src/factories/read-element-content.ts"],"sourcesContent":["import { TReadElementContentFactory } from '../types';\n\nexport const createReadElementContent: TReadElementContentFactory = (readVariableSizeInteger) => {\n    return (dataView, offset, type, channelCount = 2) => {\n        const lengthAndValue = readVariableSizeInteger(dataView, offset);\n\n        if (lengthAndValue === null) {\n            return lengthAndValue;\n        }\n\n        const { length, value } = lengthAndValue;\n\n        if (type === 'master') {\n            return { content: null, length };\n        }\n\n        if (offset + length + value > dataView.byteLength) {\n            return null;\n        }\n\n        if (type === 'binary') {\n            const numberOfSamples = (value / Float32Array.BYTES_PER_ELEMENT - 1) / channelCount;\n            const content = Array.from({ length: channelCount }, () => new Float32Array(numberOfSamples));\n\n            for (let i = 0; i < numberOfSamples; i += 1) {\n                const elementOffset = i * channelCount + 1;\n\n                for (let j = 0; j < channelCount; j += 1) {\n                    content[j][i] = dataView.getFloat32(offset + length + (elementOffset + j) * Float32Array.BYTES_PER_ELEMENT, true);\n                }\n            }\n\n            return { content, length: length + value };\n        }\n\n        return { content: null, length: length + value };\n    };\n};\n"],"mappings":"AAEA,OAAO,MAAMA,wBAAwB,GAAgCC,uBAAuB,IAAI;EAC5F,OAAO,UAACC,QAAQ,EAAEC,MAAM,EAAEC,IAAI,EAAsB;IAAA,IAApBC,YAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;IAC5C,MAAMG,cAAc,GAAGR,uBAAuB,CAACC,QAAQ,EAAEC,MAAM,CAAC;IAEhE,IAAIM,cAAc,KAAK,IAAI,EAAE;MACzB,OAAOA,cAAc;;IAGzB,MAAM;MAAEF,MAAM;MAAEG;IAAK,CAAE,GAAGD,cAAc;IAExC,IAAIL,IAAI,KAAK,QAAQ,EAAE;MACnB,OAAO;QAAEO,OAAO,EAAE,IAAI;QAAEJ;MAAM,CAAE;;IAGpC,IAAIJ,MAAM,GAAGI,MAAM,GAAGG,KAAK,GAAGR,QAAQ,CAACU,UAAU,EAAE;MAC/C,OAAO,IAAI;;IAGf,IAAIR,IAAI,KAAK,QAAQ,EAAE;MACnB,MAAMS,eAAe,GAAG,CAACH,KAAK,GAAGI,YAAY,CAACC,iBAAiB,GAAG,CAAC,IAAIV,YAAY;MACnF,MAAMM,OAAO,GAAGK,KAAK,CAACC,IAAI,CAAC;QAAEV,MAAM,EAAEF;MAAY,CAAE,EAAE,MAAM,IAAIS,YAAY,CAACD,eAAe,CAAC,CAAC;MAE7F,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,eAAe,EAAEK,CAAC,IAAI,CAAC,EAAE;QACzC,MAAMC,aAAa,GAAGD,CAAC,GAAGb,YAAY,GAAG,CAAC;QAE1C,KAAK,IAAIe,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGf,YAAY,EAAEe,CAAC,IAAI,CAAC,EAAE;UACtCT,OAAO,CAACS,CAAC,CAAC,CAACF,CAAC,CAAC,GAAGhB,QAAQ,CAACmB,UAAU,CAAClB,MAAM,GAAGI,MAAM,GAAG,CAACY,aAAa,GAAGC,CAAC,IAAIN,YAAY,CAACC,iBAAiB,EAAE,IAAI,CAAC;;;MAIzH,OAAO;QAAEJ,OAAO;QAAEJ,MAAM,EAAEA,MAAM,GAAGG;MAAK,CAAE;;IAG9C,OAAO;MAAEC,OAAO,EAAE,IAAI;MAAEJ,MAAM,EAAEA,MAAM,GAAGG;IAAK,CAAE;EACpD,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}