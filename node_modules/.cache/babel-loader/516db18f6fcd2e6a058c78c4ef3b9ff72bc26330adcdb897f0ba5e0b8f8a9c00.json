{"ast":null,"code":"import { createBroker } from 'broker-factory';\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\nexport * from './interfaces/index';\nexport * from './types/index';\nexport const wrap = createBroker({\n  characterize: _ref => {\n    let {\n      call\n    } = _ref;\n    return () => call('characterize');\n  },\n  encode: _ref2 => {\n    let {\n      call\n    } = _ref2;\n    return (recordingId, timeslice) => {\n      return call('encode', {\n        recordingId,\n        timeslice\n      });\n    };\n  },\n  record: _ref3 => {\n    let {\n      call\n    } = _ref3;\n    return async (recordingId, sampleRate, typedArrays) => {\n      await call('record', {\n        recordingId,\n        sampleRate,\n        typedArrays\n      }, typedArrays.map(_ref4 => {\n        let {\n          buffer\n        } = _ref4;\n        return buffer;\n      }));\n    };\n  }\n});\nexport const load = url => {\n  const worker = new Worker(url);\n  return wrap(worker);\n};","map":{"version":3,"names":["createBroker","wrap","characterize","_ref","call","encode","_ref2","recordingId","timeslice","record","_ref3","sampleRate","typedArrays","map","_ref4","buffer","load","url","worker","Worker"],"sources":["/Users/neelpatel/Desktop/react_application/pushup_counter/node_modules/extendable-media-recorder-wav-encoder-broker/src/module.ts"],"sourcesContent":["import { createBroker } from 'broker-factory';\nimport { TExtendableMediaRecorderWavEncoderWorkerDefinition } from 'extendable-media-recorder-wav-encoder-worker';\nimport { IExtendableMediaRecorderWavEncoderBrokerDefinition } from './interfaces';\nimport { TExtendableMediaRecorderWavEncoderBrokerLoader, TExtendableMediaRecorderWavEncoderBrokerWrapper } from './types';\n\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\nexport * from './interfaces/index';\nexport * from './types/index';\n\nexport const wrap: TExtendableMediaRecorderWavEncoderBrokerWrapper = createBroker<\n    IExtendableMediaRecorderWavEncoderBrokerDefinition,\n    TExtendableMediaRecorderWavEncoderWorkerDefinition\n>({\n    characterize: ({ call }) => {\n        return () => call('characterize');\n    },\n    encode: ({ call }) => {\n        return (recordingId, timeslice) => {\n            return call('encode', { recordingId, timeslice });\n        };\n    },\n    record: ({ call }) => {\n        return async (recordingId, sampleRate, typedArrays) => {\n            await call(\n                'record',\n                { recordingId, sampleRate, typedArrays },\n                typedArrays.map(({ buffer }) => buffer)\n            );\n        };\n    }\n});\n\nexport const load: TExtendableMediaRecorderWavEncoderBrokerLoader = (url: string) => {\n    const worker = new Worker(url);\n\n    return wrap(worker);\n};\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,gBAAgB;AAK7C;;;;AAIA,cAAc,oBAAoB;AAClC,cAAc,eAAe;AAE7B,OAAO,MAAMC,IAAI,GAAoDD,YAAY,CAG/E;EACEE,YAAY,EAAEC,IAAA,IAAa;IAAA,IAAZ;MAAEC;IAAI,CAAE,GAAAD,IAAA;IACnB,OAAO,MAAMC,IAAI,CAAC,cAAc,CAAC;EACrC,CAAC;EACDC,MAAM,EAAEC,KAAA,IAAa;IAAA,IAAZ;MAAEF;IAAI,CAAE,GAAAE,KAAA;IACb,OAAO,CAACC,WAAW,EAAEC,SAAS,KAAI;MAC9B,OAAOJ,IAAI,CAAC,QAAQ,EAAE;QAAEG,WAAW;QAAEC;MAAS,CAAE,CAAC;IACrD,CAAC;EACL,CAAC;EACDC,MAAM,EAAEC,KAAA,IAAa;IAAA,IAAZ;MAAEN;IAAI,CAAE,GAAAM,KAAA;IACb,OAAO,OAAOH,WAAW,EAAEI,UAAU,EAAEC,WAAW,KAAI;MAClD,MAAMR,IAAI,CACN,QAAQ,EACR;QAAEG,WAAW;QAAEI,UAAU;QAAEC;MAAW,CAAE,EACxCA,WAAW,CAACC,GAAG,CAACC,KAAA;QAAA,IAAC;UAAEC;QAAM,CAAE,GAAAD,KAAA;QAAA,OAAKC,MAAM;MAAA,EAAC,CAC1C;IACL,CAAC;EACL;CACH,CAAC;AAEF,OAAO,MAAMC,IAAI,GAAoDC,GAAW,IAAI;EAChF,MAAMC,MAAM,GAAG,IAAIC,MAAM,CAACF,GAAG,CAAC;EAE9B,OAAOhB,IAAI,CAACiB,MAAM,CAAC;AACvB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}