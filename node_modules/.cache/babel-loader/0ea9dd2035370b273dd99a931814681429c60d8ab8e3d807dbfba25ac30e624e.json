{"ast":null,"code":"export const createWrapSubscribeFunction = (patch, toObserver) => {\n  const emptyFunction = () => {}; // tslint:disable-line:no-empty\n  const isNextFunction = args => typeof args[0] === 'function';\n  return innerSubscribe => {\n    const subscribe = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      const unsubscribe = innerSubscribe(isNextFunction(args) ? toObserver({\n        next: args[0]\n      }) : toObserver(...args));\n      if (unsubscribe !== undefined) {\n        return unsubscribe;\n      }\n      return emptyFunction;\n    };\n    subscribe[Symbol.observable] = () => ({\n      subscribe: function () {\n        return {\n          unsubscribe: subscribe(...arguments)\n        };\n      }\n    });\n    return patch(subscribe);\n  };\n};","map":{"version":3,"names":["createWrapSubscribeFunction","patch","toObserver","emptyFunction","isNextFunction","args","innerSubscribe","subscribe","_len","arguments","length","Array","_key","unsubscribe","next","undefined","Symbol","observable"],"sources":["/Users/neelpatel/Desktop/react_application/pushup_counter/node_modules/subscribable-things/src/factories/wrap-subscribe-function.ts"],"sourcesContent":["import { Observer, Subscribable } from 'rxjs-interop';\nimport { TObserverParameters, TSubscribableThing, TSubscribeFunction, TWrapSubscribeFunctionFactory } from '../types';\n\nexport const createWrapSubscribeFunction: TWrapSubscribeFunctionFactory = (patch, toObserver) => {\n    const emptyFunction = () => {}; // tslint:disable-line:no-empty\n    const isNextFunction = <T>(args: TObserverParameters<T>): args is [Observer<T>['next']] => typeof args[0] === 'function';\n\n    return <T>(innerSubscribe: TSubscribeFunction<T>) => {\n        const subscribe = <TSubscribableThing<T>>((...args: TObserverParameters<T>) => {\n            const unsubscribe = innerSubscribe(isNextFunction(args) ? toObserver({ next: args[0] }) : toObserver(...args));\n\n            if (unsubscribe !== undefined) {\n                return unsubscribe;\n            }\n\n            return emptyFunction;\n        });\n\n        subscribe[Symbol.observable] = () => ({\n            subscribe: (...args: Parameters<Subscribable<T>['subscribe']>) => ({ unsubscribe: subscribe(...args) })\n        });\n\n        return patch(subscribe);\n    };\n};\n"],"mappings":"AAGA,OAAO,MAAMA,2BAA2B,GAAkCA,CAACC,KAAK,EAAEC,UAAU,KAAI;EAC5F,MAAMC,aAAa,GAAGA,CAAA,KAAK,CAAE,CAAC,CAAC,CAAC;EAChC,MAAMC,cAAc,GAAOC,IAA4B,IAAoC,OAAOA,IAAI,CAAC,CAAC,CAAC,KAAK,UAAU;EAExH,OAAWC,cAAqC,IAAI;IAChD,MAAMC,SAAS,GAA2B,SAAAA,CAAA,EAAoC;MAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAhCL,IAA4B,OAAAM,KAAA,CAAAH,IAAA,GAAAI,IAAA,MAAAA,IAAA,GAAAJ,IAAA,EAAAI,IAAA;QAA5BP,IAA4B,CAAAO,IAAA,IAAAH,SAAA,CAAAG,IAAA;MAAA;MACtE,MAAMC,WAAW,GAAGP,cAAc,CAACF,cAAc,CAACC,IAAI,CAAC,GAAGH,UAAU,CAAC;QAAEY,IAAI,EAAET,IAAI,CAAC,CAAC;MAAC,CAAE,CAAC,GAAGH,UAAU,CAAC,GAAGG,IAAI,CAAC,CAAC;MAE9G,IAAIQ,WAAW,KAAKE,SAAS,EAAE;QAC3B,OAAOF,WAAW;;MAGtB,OAAOV,aAAa;IACxB,CAAE;IAEFI,SAAS,CAACS,MAAM,CAACC,UAAU,CAAC,GAAG,OAAO;MAClCV,SAAS,EAAE,SAAAA,CAAA;QAAA,OAAwD;UAAEM,WAAW,EAAEN,SAAS,CAAC,GAAAE,SAAO;QAAC,CAAE;MAAA;KACzG,CAAC;IAEF,OAAOR,KAAK,CAACM,SAAS,CAAC;EAC3B,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}