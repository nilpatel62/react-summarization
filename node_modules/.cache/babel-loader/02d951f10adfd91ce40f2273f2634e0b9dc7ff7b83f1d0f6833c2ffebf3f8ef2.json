{"ast":null,"code":"var _jsxFileName = \"/Users/neelpatel/Desktop/react_application/pushup_counter/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Record } from 'react-media-recorder';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LiveFeedComponent = () => {\n  _s();\n  const [videoBlob, setVideoBlob] = useState(null);\n  const handleVideoData = blob => {\n    setVideoBlob(blob);\n    sendVideoData(blob);\n  };\n  const sendVideoData = async blob => {\n    const formData = new FormData();\n    formData.append('video', blob);\n    try {\n      await axios.post('http://localhost:8000/api/upload-video/', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      console.log('Video data sent successfully');\n    } catch (error) {\n      console.error('Error sending video data:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Live Feed Component\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Record, {\n      render: _ref => {\n        let {\n          start,\n          stop\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: start,\n            children: \"Start Recording\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: stop,\n            children: \"Stop Recording\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this);\n      },\n      onStop: handleVideoData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(LiveFeedComponent, \"3xuBTMEqHfQKuC8YxCmj1bdtAkI=\");\n_c = LiveFeedComponent;\nexport default LiveFeedComponent;\nvar _c;\n$RefreshReg$(_c, \"LiveFeedComponent\");","map":{"version":3,"names":["React","useState","Record","axios","jsxDEV","_jsxDEV","LiveFeedComponent","_s","videoBlob","setVideoBlob","handleVideoData","blob","sendVideoData","formData","FormData","append","post","headers","console","log","error","children","fileName","_jsxFileName","lineNumber","columnNumber","render","_ref","start","stop","onClick","onStop","_c","$RefreshReg$"],"sources":["/Users/neelpatel/Desktop/react_application/pushup_counter/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Record } from 'react-media-recorder';\nimport axios from 'axios';\n\nconst LiveFeedComponent = () => {\n  const [videoBlob, setVideoBlob] = useState(null);\n\n  const handleVideoData = (blob) => {\n    setVideoBlob(blob);\n    sendVideoData(blob);\n  };\n\n  const sendVideoData = async (blob) => {\n    const formData = new FormData();\n    formData.append('video', blob);\n\n    try {\n      await axios.post('http://localhost:8000/api/upload-video/', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n        },\n      });\n      console.log('Video data sent successfully');\n    } catch (error) {\n      console.error('Error sending video data:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Live Feed Component</h1>\n      <Record\n        render={({ start, stop }) => (\n          <div>\n            <button onClick={start}>Start Recording</button>\n            <button onClick={stop}>Stop Recording</button>\n          </div>\n        )}\n        onStop={handleVideoData}\n      />\n    </div>\n  );\n};\n\nexport default LiveFeedComponent;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,MAAM,QAAQ,sBAAsB;AAC7C,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAEhD,MAAMS,eAAe,GAAIC,IAAI,IAAK;IAChCF,YAAY,CAACE,IAAI,CAAC;IAClBC,aAAa,CAACD,IAAI,CAAC;EACrB,CAAC;EAED,MAAMC,aAAa,GAAG,MAAOD,IAAI,IAAK;IACpC,MAAME,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BD,QAAQ,CAACE,MAAM,CAAC,OAAO,EAAEJ,IAAI,CAAC;IAE9B,IAAI;MACF,MAAMR,KAAK,CAACa,IAAI,CAAC,yCAAyC,EAAEH,QAAQ,EAAE;QACpEI,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACFC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;IAC7C,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACnD;EACF,CAAC;EAED,oBACEf,OAAA;IAAAgB,QAAA,gBACEhB,OAAA;MAAAgB,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5BpB,OAAA,CAACH,MAAM;MACLwB,MAAM,EAAEC,IAAA;QAAA,IAAC;UAAEC,KAAK;UAAEC;QAAK,CAAC,GAAAF,IAAA;QAAA,oBACtBtB,OAAA;UAAAgB,QAAA,gBACEhB,OAAA;YAAQyB,OAAO,EAAEF,KAAM;YAAAP,QAAA,EAAC;UAAe;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAChDpB,OAAA;YAAQyB,OAAO,EAAED,IAAK;YAAAR,QAAA,EAAC;UAAc;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC3C,CAAC;MAAA,CACN;MACFM,MAAM,EAAErB;IAAgB;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAClB,EAAA,CAtCID,iBAAiB;AAAA0B,EAAA,GAAjB1B,iBAAiB;AAwCvB,eAAeA,iBAAiB;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}